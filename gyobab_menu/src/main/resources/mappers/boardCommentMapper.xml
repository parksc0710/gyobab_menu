<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.park.gyobab.BoardCommentMapper">
  
  	<resultMap type="com.park.gyobab.domain.MemberVO" id="MemberVO">
		<result column="member_id" property="member_id" />
		<result column="member_name" property="member_name" />
		<result column="act_flg" property="act_flg" />
		<result column="del_flg" property="del_flg" />
	</resultMap>
  
    <resultMap type="com.park.gyobab.domain.MemberVO" id="ParentMemberVO">
		<result column="member_id" property="member_id" />
		<result column="member_name" property="member_name" />
		<result column="act_flg" property="act_flg" />
		<result column="del_flg" property="del_flg" />
	</resultMap>
	
  	<resultMap type="com.park.gyobab.domain.BoardVO" id="BoardVO">
		<result column="board_id" property="board_id" />
		<result column="act_flg" property="act_flg" />
		<result column="del_flg" property="del_flg" />
	</resultMap>
	
	<resultMap type="com.park.gyobab.domain.BoardCommentVO" id="BoardCommentVO">
		<result column="board_comment_id" property="board_comment_id" />
		<result column="board_comment_parent" property="board_comment_parent" />
		<result column="board_comment_txt" property="board_comment_txt" />
		<result column="board_comment_depth" property="board_comment_depth" />
		<result column="board_comment_order" property="board_comment_order" />
		<result column="create_date" property="create_date" />
		<result column="update_date" property="update_date" />
		<result column="act_flg" property="act_flg" />
		<result column="del_flg" property="del_flg" />
		<result column="view_flg" property="view_flg" />
		<result column="parent_member_name" property="parent_member_name" />
		<collection property="memberVO" resultMap="MemberVO" />
		<collection property="boardVO" resultMap="BoardVO" />
	</resultMap>
	
	<insert id="insertBoardComment" parameterType="hashmap">
		INSERT INTO `gyobab`.`board_comment`
		(
			`board_comment_parent`,
			`board_comment_board`,
			`board_comment_txt`,
			`board_comment_member`,
			`board_comment_parent_member`,
			`board_comment_depth`,
			`board_comment_order`
		)
		VALUES
		(
			NULL,
			#{board_comment_board},
			#{board_comment_txt},
			#{board_comment_member},
			NULL,
			0,
			0
		);
		
		SET @last_id = last_insert_id();
		
		update `gyobab`.`board_comment` set `board_comment_parent` = @last_id where `board_comment_id` = @last_id;
  	</insert>
  	
  	<insert id="insertBoardCommentReply" parameterType="hashmap">
  	
  		SET @comment_parent = (select `board_comment_parent` from `board_comment` where `board_comment_id` = #{board_comment_id});
  		SET @comment_board = (select `board_comment_board` from `board_comment` where `board_comment_id` = #{board_comment_id});
  		SET @comment_parent_member = (select `board_comment_member` from `board_comment` where `board_comment_id` = #{board_comment_id});
  		SET @comment_order = (select `board_comment_order` from `board_comment` where `board_comment_parent` = @comment_parent and `act_flg` = 1 and `del_flg` = 0 order by `board_comment_id` desc LIMIT 1);
  	
		INSERT INTO `gyobab`.`board_comment`
		(
			`board_comment_parent`,
			`board_comment_board`,
			`board_comment_txt`,
			`board_comment_member`,
			`board_comment_parent_member`,
			`board_comment_depth`,
			`board_comment_order`
		)
		VALUES
		(
			@comment_parent,
			@comment_board,
			#{board_comment_txt},
			#{board_comment_member},
			@comment_parent_member,
			1,
			(@comment_order+1)
		);
  	</insert>
  	
  	<select id="selectBoardComments" parameterType="int" resultMap="BoardCommentVO">
  		<![CDATA[
	  		SELECT 
	  			`board_comment`.`board_comment_id`,
			    `board_comment`.`board_comment_parent`,
			    a.`board_id`,
			    `board_comment`.`board_comment_txt`,
			    b.`member_id`,
			    b.`member_name`,
			    c.`member_id`,
			    c.`member_name` as 'parent_member_name',
			    `board_comment`.`board_comment_depth`,
			    `board_comment`.`board_comment_order`,
			    `board_comment`.`create_date`,
			    `board_comment`.`update_date`,
			    `board_comment`.`view_flg`,
			    `board_comment`.`act_flg`,
			    `board_comment`.`del_flg`
			FROM `gyobab`.`board_comment`
			inner join `gyobab`.`board` a on a.`board_id` = `board_comment`.`board_comment_board`
			left join `gyobab`.`member` b on b.`member_id` = `board_comment`.`board_comment_member`
			left join `gyobab`.`member` c on c.`member_id` = `board_comment`.`board_comment_parent_member`
			where `board_comment`.`board_comment_board` = #{board_comment_board} and `board_comment`.`act_flg` = 1 and `board_comment`.`del_flg` = 0
			order by `board_comment`.`board_comment_parent` asc, `board_comment`.`board_comment_order` asc;

		]]>
  	</select>
  	
  	<update id="deleteBoardComment" parameterType="int">
  		update `board_comment` set `act_flg` = 0, `del_flg` = 1, `update_date` = NOW() where `board_comment`.`board_comment_id` = #{board_comment_id}
  	</update>
  	
  	<update id="deleteBoardCommentWithParent" parameterType="int">
  		update `board_comment` set `view_flg` = 1, `update_date` = NOW() where `board_comment`.`board_comment_id` = #{board_comment_id}
  	</update>
  	
  	<update id="updateBoardComment" parameterType="hashmap">
  	update `board_comment` set `board_comment_txt` = #{board_comment_txt}, `update_date` = NOW() where `board_comment`.`board_comment_id` = #{board_comment_id}
  	</update>
  	
  	<select id="selectBoardCommentById" parameterType="int" resultMap="BoardCommentVO">
  		SELECT 
	  			`board_comment`.`board_comment_id`,
			    `board_comment`.`board_comment_parent`,
			    a.`board_id`,
			    `board_comment`.`board_comment_txt`,
			    b.`member_id`,
			    b.`member_name`,
			    c.`member_id`,
			    c.`member_name`,
			    `board_comment`.`board_comment_depth`,
			    `board_comment`.`board_comment_order`,
			    `board_comment`.`create_date`,
			    `board_comment`.`update_date`,
			    `board_comment`.`view_flg`,
			    `board_comment`.`act_flg`,
			    `board_comment`.`del_flg`
		FROM `gyobab`.`board_comment`
		inner join `gyobab`.`board` a on a.`board_id` = `board_comment`.`board_comment_board`
		inner join `gyobab`.`member` b on b.`member_id` = `board_comment`.`board_comment_member`
		left join `gyobab`.`member` c on c.`member_id` = `board_comment`.`board_comment_parent_member`
		where `board_comment`.`board_comment_id` = #{board_comment_id} and `board_comment`.`act_flg` = 1 and `board_comment`.`del_flg` = 0
  	</select>
  	
  	<select id="selectBoardCommentCntWithCommentParent" resultType="Integer" parameterType="int" >
  		select count(`board_comment`.`board_comment_id`) 
  		from `board_comment` 
  		where `board_comment`.`board_comment_parent` = #{board_comment_parent};
  	</select>
  	
  </mapper>
 
 